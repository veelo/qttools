{
    "files": {
        "publicHeader": "src/global/qttools-config.h",
        "privateHeader": "src/global/qttools-config_p.h",
        "publicPro": "src/global/qttools-config.pri",
        "privatePro": "src/global/qttools-config.pri"
    },
    "module": "tools",
    "tests": {
        "libclang": {
            "label": "libclang",
            "test": "libclang",
            "type": "libclang"
        }
    },
    "features": {
        "assistant": {
            "label": "Qt Assistant",
            "purpose": "Qt Assistant is a tool for viewing on-line documentation in Qt help file format.",
            "output": [ "privateFeature" ]
        },
        "clang": {
            "label": "QDoc",
            "condition": "tests.libclang",
            "output": [
                "privateFeature",
                { "type": "varAssign", "name": "CLANG_LIBS", "value": "tests.libclang.libs" },
                { "type": "varAssign", "name": "CLANG_INCLUDEPATH", "value": "tests.libclang.includepath" },
                { "type": "varAssign", "name": "CLANG_LIBDIR", "value": "tests.libclang.libdir" },
                { "type": "varAssign", "name": "CLANG_DEFINES", "value": "tests.libclang.defines" },
                { "type": "varAssign", "name": "CLANG_VERSION", "value": "tests.libclang.version" },
                { "type": "varAssign", "name": "CLANG_MAJOR_VERSION", "value": "tests.libclang.major_version" },
                { "type": "varAssign", "name": "CLANG_MINOR_VERSION", "value": "tests.libclang.minor_version" },
                { "type": "varAssign", "name": "CLANG_PATCH_VERSION", "value": "tests.libclang.patch_version" }
            ]
        },
        "clangcpp": {
            "label": "Clang-based lupdate parser",
            "condition": "features.clang && tests.libclang.has_clangcpp",
            "output": [
                "privateFeature",
                { "type": "varAssign", "name": "CLANGCPP_LIBS", "value": "tests.libclang.clangcpp_libs" }
            ]
        },
        "designer": {
            "label": "Qt Designer",
            "purpose": "Qt Designer is the Qt tool for designing and building graphical user interfaces (GUIs) with Qt Widgets. You can compose and customize your windows or dialogs in a what-you-see-is-what-you-get (WYSIWYG) manner, and test them using different styles and resolutions.",
            "output": [ "privateFeature" ]
        },
        "distancefieldgenerator": {
            "label": "Qt Distance Field Generator",
            "purpose": "The Qt Distance Field Generator tool can be used to pregenerate the font cache in order to optimize startup performance.",
            "output": [ "privateFeature" ]
        },
        "kmap2qmap": {
            "label": "kmap2qmap",
            "purpose": "kmap2qmap is a tool to generate keymaps for use on Embedded Linux. The source files have to be in standard Linux kmap format that is e.g. understood by the kernel's loadkeys command.",
            "output": [ "privateFeature" ]
        },
        "linguist": {
            "label": "Qt Linguist",
            "purpose": "Qt Linguist can be used by translator to translate text in Qt applications.",
            "output": [ "privateFeature" ]
        },
        "macdeployqt": {
            "label": "Mac Deployment Tool",
            "purpose": "The Mac deployment tool automates the process of creating a deployable application bundle that contains the Qt libraries as private frameworks.",
            "condition": "config.darwin",
            "output": [ "privateFeature" ]
        },
        "pixeltool": {
            "label": "pixeltool",
            "purpose": "The Qt Pixel Zooming Tool is a graphical application that magnifies the screen around the mouse pointer so you can look more closely at individual pixels.",
            "output": [ "privateFeature" ]
        },
        "qdbus": {
            "label": "qdbus",
            "purpose": "qdbus is a communication interface for Qt-based applications.",
            "output": [ "privateFeature" ]
        },
        "qev": {
            "label": "qev",
            "purpose": "qev allows introspection of incoming events for a QWidget, similar to the X11 xev tool.",
            "output": [ "privateFeature" ]
        },
        "qtattributionsscanner": {
            "label": "Qt Attributions Scanner",
            "purpose": "Qt Attributions Scanner generates attribution documents for third-party code in Qt.",
            "output": [ "privateFeature" ]
        },
        "qtdiag": {
            "label": "qtdiag",
            "purpose": "qtdiag outputs information about the Qt installation it was built with.",
            "output": [ "privateFeature" ]
        },
        "qtpaths": {
            "label": "qtpaths",
            "purpose": "qtpaths is a command line client to QStandardPaths.",
            "output": [ "privateFeature" ]
        },
        "qtplugininfo": {
            "label": "qtplugininfo",
            "purpose": "qtplugininfo dumps metadata about Qt plugins in JSON format.",
            "output": [ "privateFeature" ]
        },
        "windeployqt": {
            "label": "Windows deployment tool",
            "purpose": "The Windows deployment tool is designed to automate the process of creating a deployable folder containing the Qt-related dependencies (libraries, QML imports, plugins, and translations) required to run the application from that folder. It creates a sandbox for Universal Windows Platform (UWP) or an installation tree for Windows desktop applications, which can be easily bundled into an installation package.",
            "condition": "config.win32",
            "output": [ "privateFeature" ]
        }
    },
    "report": [
        {
            "type": "warning",
            "condition": "!features.clang",
            "message": "QDoc will not be compiled, probably because libclang could not be located. This means that you cannot build the Qt documentation.\n
Either set CMAKE_PREFIX_PATH or LLVM_INSTALL_DIR to the location of your llvm installation.
On Linux systems, you may be able to install libclang by installing the libclang-dev or libclang-devel package, depending on your distribution.
On macOS, you can use Homebrew's llvm package."
        },
        {
            "type": "warning",
            "condition": "!features.clangcpp",
            "message": "Clang-based lupdate parser will not be available. LLVM and Clang C++ libraries have not been found."
        }
    ],
    "summary": [
        {
            "section": "Qt Tools",
            "entries": [
                "assistant",
                "clang",
                "clangcpp",
                "designer",
                "distancefieldgenerator",
                "kmap2qmap",
                "linguist",
                "macdeployqt",
                "pixeltool",
                "qdbus",
                "qev",
                "qtattributionsscanner",
                "qtdiag",
                "qtpaths",
                "qtplugininfo",
                "windeployqt"
            ]
        }
    ]
}
